// Reset
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

// Base
*,
::before,
::after {
  box-sizing: border-box;
}

:root {
  --text-color: #1a162e;
}

html {
  font-size: 62.5%;
}

body {
  font-family: Gordita, sans-serif;
  font-size: 1.6rem;
  color: var(--text-color);
  background-color: #f6f6f6;
}

a {
  color: inherit;
  text-decoration: none;
}

button {
  border: none;
  outline: none;
  background: transparent;
}

// Grid
// Breakpoints, dimension, container, row, column, v.v
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1370px,
);
$grid-columns: 12 !default;
$grid-gutter-width: 30px !default;
$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3,
);

%gutter-padding {
  padding-left: calc(var(--grid-gutter-x) * 0.5);
  padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid {
  --grid-gutter-x: #{$grid-gutter-width};
  --grid-gutter-y: 0;

  width: 100%;
  margin-left: auto;
  margin-right: auto;
  @extend %gutter-padding;
}

.container {
  @extend .container-fluid;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--grid-gutter-y) * -1);
  margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
  margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

  > * {
    margin-top: var(--grid-gutter-y);
    @extend %gutter-padding;
  }
}

.col {
  flex: 1 0;
}

@mixin make-media-query($dimension, $bypass: false) {
  @if $bypass {
    @content;
  } @else {
    @media (min-width: $dimension) {
      @content;
    }
  }
}

@mixin make-row-columns($infix) {
  @for $i from 1 through $grid-columns * 0.5 {
    .row-cols#{$infix}-#{$i} > * {
      flex: 0 0 auto;
      width: calc(0.01 / $i);
    }
  }
}

@mixin make-columns($infix) {
  @for $i from 1 through $grid-columns {
    .col#{$infix}-#{$i} {
      flex: 0 0 auto;
      width:calc(0.01 / $grid-columns) * $i;
    }
  }
}

@mixin make-offsets($infix) {
  @for $i from 0 to $grid-columns {
    .offset#{$infix}-#{$i} {
      margin-left: if($i > 0, calc(0.01 / $grid-columns) * $i, 0);
    }
  }
}

@mixin make-gutters($infix) {
  @each $i, $ratio in $gutters {
    .g#{$infix}-#{$i},
    .gx#{$infix}-#{$i} {
      --grid-gutter-x: #{$grid-gutter-width * $ratio};
    }

    .g#{$infix}-#{$i},
    .gy#{$infix}-#{$i} {
      --grid-gutter-y: #{$grid-gutter-width * $ratio};
    }
  }
}

@each $breakpoint, $dimension in $grid-breakpoints {
  $max-width: map-get($container-max-widths, $breakpoint);
  $is-xs: $breakpoint == xs;
  $infix: if($is-xs, "", "-#{$breakpoint}");

  @include make-media-query($dimension, $is-xs) {
    .container {
      max-width: $max-width;
    }

    @include make-row-columns($infix);

    @include make-columns($infix);

    @include make-offsets($infix);

    @include make-gutters($infix);
  }
}

